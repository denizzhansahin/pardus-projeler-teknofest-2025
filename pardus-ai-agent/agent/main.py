# agent/main.py
import sys
import os
from colorama import init, Fore, Style

# Projemizdeki diÄŸer modÃ¼lleri iÃ§eri aktarÄ±yoruz.
# '.' (nokta) ifadesi, "bu paket iÃ§indeki" anlamÄ±na gelir.
from . import config_manager
from . import ai_core
from . import action_executor
from . import archive_manager

# colorama'yÄ± baÅŸlatarak Windows'ta da renklerin Ã§alÄ±ÅŸmasÄ±nÄ± saÄŸlÄ±yoruz.
# autoreset=True ile her print sonrasÄ± renkler otomatik sÄ±fÄ±rlanÄ±r.
init(autoreset=True)

# Kodun daha okunaklÄ± olmasÄ± iÃ§in renkleri bir sÄ±nÄ±fta topluyoruz.
class Renkler:
    BASLIK = Style.BRIGHT + Fore.CYAN
    UYARI = Fore.YELLOW
    HATA = Fore.RED
    BASARI = Fore.GREEN
    BILGI = Fore.BLUE
    KULLANICI = Style.BRIGHT
    RESET = Style.RESET_ALL

def print_welcome_message():
    """Asistan baÅŸladÄ±ÄŸÄ±nda kullanÄ±cÄ±yÄ± karÅŸÄ±layan mesajÄ± basar."""
    print(Renkler.BASLIK + "--- Pardus AI AsistanÄ±'na HoÅŸ Geldiniz ---")
    print("GÃ¶revlerinizi belirtin, sizin iÃ§in bir eylem planÄ± ve betik hazÄ±rlayayÄ±m.")
    print("Dahili komutlar iÃ§in " + Renkler.BILGI + "/help" + Renkler.RESET + " yazÄ±n.")

def print_help():
    """/help komutuyla Ã§aÄŸrÄ±lan yardÄ±m menÃ¼sÃ¼nÃ¼ basar."""
    print(f"""
{Style.BRIGHT}Dahili Komutlar:{Renkler.RESET}
  {Renkler.BILGI}/help{Renkler.RESET}           : Bu yardÄ±m mesajÄ±nÄ± gÃ¶sterir.
  {Renkler.BILGI}/reconfigure{Renkler.RESET}    : API anahtarÄ±nÄ± ve modeli yeniden yapÄ±landÄ±rÄ±r.
  {Renkler.BILGI}/cwd{Renkler.RESET}            : Mevcut Ã§alÄ±ÅŸma dizinini gÃ¶sterir.
  {Renkler.BILGI}/clear{Renkler.RESET}          : Sohbet geÃ§miÅŸini temizler ve asistanÄ± sÄ±fÄ±rlar.
  {Renkler.BILGI}/exit, /quit{Renkler.RESET}    : AsistanÄ± sonlandÄ±rÄ±r.
    """)

def handle_internal_command(prompt, history):
    """
    KullanÄ±cÄ±nÄ±n girdiÄŸi komutun dahili bir komut olup olmadÄ±ÄŸÄ±nÄ± kontrol eder.
    EÄŸer Ã¶yleyse, iÅŸlemi yapar ve (True, gÃ¼ncel_geÃ§miÅŸ) dÃ¶ndÃ¼rÃ¼r.
    DeÄŸilse, (False, history) dÃ¶ndÃ¼rÃ¼r.
    """
    cmd = prompt.lower().strip()
    if cmd in ["/exit", "/quit", "exit", "quit"]:
        print(Renkler.UYARI + "ğŸ‘‹ HoÅŸÃ§a kalÄ±n!"); sys.exit(0)
    if cmd == "/help":
        print_help()
        return True, history
    if cmd == "/reconfigure":
        config_manager.prompt_for_config()
        print(Renkler.BASARI + "âœ… YapÄ±landÄ±rma gÃ¼ncellendi. AsistanÄ± yeniden baÅŸlatÄ±n."); sys.exit(0)
    if cmd == "/cwd":
        print(Renkler.BILGI + f"Mevcut Dizin: {os.getcwd()}")
        return True, history
    if cmd == "/clear":
        os.system('clear') # Terminali temizle
        print_welcome_message()
        print(Renkler.BASARI + "Sohbet geÃ§miÅŸi temizlendi.")
        return True, [] # Sohbet geÃ§miÅŸini sÄ±fÄ±rla
    return False, history

def main():
    """Ana uygulama fonksiyonu. setup.py tarafÄ±ndan Ã§aÄŸrÄ±lÄ±r."""
    # Program --reconfigure argÃ¼manÄ±yla baÅŸlatÄ±ldÄ±ysa, yapÄ±landÄ±rmayÄ± sor ve Ã§Ä±k.
    if "--reconfigure" in sys.argv:
        config_manager.prompt_for_config()
        sys.exit(0)

    # AyarlarÄ± yÃ¼klemeye Ã§alÄ±ÅŸ. Yoksa, kullanÄ±cÄ±dan yeni ayar iste.
    config = config_manager.load_config() or config_manager.prompt_for_config()
    
    # AI modelini yÃ¼kle. BaÅŸarÄ±sÄ±z olursa, programdan Ã§Ä±k.
    if not ai_core.setup_model(config['api_key'], config['model_name']):
        sys.exit(1)
    
    print_welcome_message()
    print(f"ğŸ¤– Model {Style.BRIGHT}{config['model_name']}{Renkler.RESET} ile hizmetinizde.")
    
    # Sohbet geÃ§miÅŸini ve son komutun Ã§Ä±ktÄ±sÄ±nÄ± tutacak deÄŸiÅŸkenleri baÅŸlat.
    conversation_history = []
    last_command_output = "Yok (ilk komut)."

    # Ana uygulama dÃ¶ngÃ¼sÃ¼
    while True:
        try:
            # KullanÄ±cÄ±ya gÃ¶sterilecek olan ÅŸÄ±k prompt'u oluÅŸtur.
            current_dir = os.path.basename(os.getcwd())
            user_prompt = input(f"\n{Renkler.KULLANICI}({current_dir}) Pardus ğŸ‘¤ >{Renkler.RESET} ")
            
            # Girilen komutun dahili bir komut olup olmadÄ±ÄŸÄ±nÄ± kontrol et.
            is_internal, conversation_history = handle_internal_command(user_prompt, conversation_history)
            if is_internal:
                continue # EÄŸer dahili komutsa, AI'a gitmeden dÃ¶ngÃ¼nÃ¼n baÅŸÄ±na dÃ¶n.

            # === GERÄ° BÄ°LDÄ°RÄ°M DÃ–NGÃœSÃœ ===
            # AI'a gÃ¶ndereceÄŸimiz tam prompt'u oluÅŸturuyoruz.
            # Bu, AI'Ä±n bir Ã¶nceki iÅŸlemin sonucundan haberdar olmasÄ±nÄ± saÄŸlar.
            full_prompt = (
                f"KullanÄ±cÄ± Ä°steÄŸi: {user_prompt}\n\n"
                f"Ã–nceki Komutun Ã‡Ä±ktÄ±sÄ± (stdout/stderr):\n---\n{last_command_output}\n---"
            )
            
            print(Renkler.BILGI + "ğŸ¤– Pardus AsistanÄ± dÃ¼ÅŸÃ¼nÃ¼yor...")
            # AI'dan bir eylem Ã¼retmesini iste ve sohbet geÃ§miÅŸini gÃ¼ncelle.
            response_text, conversation_history = ai_core.generate_action(full_prompt, conversation_history)
            
            # AI'Ä±n cevabÄ±nÄ± analiz et: dÃ¼z metin mi, yoksa kod mu?
            plain_text, reasoning, code = ai_core.parse_response(response_text)

            if code:
                # EÄŸer AI bir kod bloÄŸu Ã¼rettiyse...
                print(f"\n{Renkler.BASLIK}ğŸ¤– Asistan'Ä±n Eylem PlanÄ±:{Renkler.RESET}")
                if reasoning:
                    print(f"{Style.BRIGHT}DÃ¼ÅŸÃ¼nce SÃ¼reci:{Renkler.RESET}\n{reasoning}")
                print(f"\n{Style.BRIGHT}Ã–nerilen Betik:{Renkler.RESET}\n{Renkler.BASARI}{code}{Renkler.RESET}")
                
                # KullanÄ±cÄ±dan betiÄŸi Ã§alÄ±ÅŸtÄ±rmak iÃ§in onay iste.
                confirm = input(f"{Renkler.UYARI}Bu betiÄŸi Ã§alÄ±ÅŸtÄ±rmak istiyor musunuz? [y/N]: {Renkler.RESET}")
                if confirm.lower() == 'y':
                    print(f"\n{Renkler.BILGI}ğŸš€ Betik Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor...{Renkler.RESET}")
                    # BetiÄŸi Ã§alÄ±ÅŸtÄ±r ve Ã§Ä±ktÄ±larÄ±nÄ± al.
                    stdout, stderr, returncode = action_executor.execute_script(code)
                    # Bir sonraki istek iÃ§in geri bildirim deÄŸiÅŸkenini gÃ¼ncelle.
                    last_command_output = f"STDOUT:\n{stdout}\n\nSTDERR:\n{stderr}"
                    
                    print(f"\n{Style.BRIGHT}--- Ã‡IKTI (STDOUT) ---{Renkler.RESET}\n{stdout or '[BoÅŸ]'}")
                    if stderr:
                        print(f"\n{Style.BRIGHT}{Renkler.HATA}--- HATA (STDERR) ---{Renkler.RESET}\n{stderr}")
                    
                    print(f"{Renkler.BASARI}âœ… Betik tamamlandÄ±. (Ã‡Ä±kÄ±ÅŸ Kodu: {returncode}){Renkler.RESET}")
                    # TÃ¼m etkileÅŸimi arÅŸive kaydet.
                    archive_manager.log_interaction(user_prompt, reasoning or "Yok", code, stdout, stderr)
                else:
                    print(Renkler.UYARI + "âœ‹ Ä°ÅŸlem iptal edildi.")
                    last_command_output = "KullanÄ±cÄ± iÅŸlemi iptal etti."
            else:
                # EÄŸer AI sadece sohbet ettiyse, cevabÄ±nÄ± ekrana bas.
                print(f"\n{Renkler.BILGI}ğŸ¤– Pardus AsistanÄ±: {plain_text}{Renkler.RESET}")
                last_command_output = "Asistan bir betik Ã¼retmedi, sadece konuÅŸtu."
        except (KeyboardInterrupt, EOFError):
            # Ctrl+C veya Ctrl+D ile Ã§Ä±kÄ±ÅŸ yapÄ±ldÄ±ÄŸÄ±nda...
            print(f"\n{Renkler.UYARI}ğŸ‘‹ HoÅŸÃ§a kalÄ±n!");
            break
        except Exception as e:
            # Beklenmedik bir hata oluÅŸursa programÄ±n Ã§Ã¶kmesini engelle.
            print(f"\n{Renkler.HATA}Beklenmedik bir hata oluÅŸtu: {e}")

# Bu dosya doÄŸrudan Ã§alÄ±ÅŸtÄ±rÄ±lÄ±rsa main() fonksiyonunu Ã§aÄŸÄ±rÄ±r.
# Ancak bizim projemizde asÄ±l Ã§aÄŸrÄ± setup.py'daki entry_point Ã¼zerinden yapÄ±lÄ±r.
if __name__ == "__main__":
    main()